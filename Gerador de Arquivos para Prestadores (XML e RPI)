import pandas as pd
from lxml import etree
import os
from datetime import datetime
import tkinter as tk
from tkinter import filedialog, messagebox
import copy
import re
import unicodedata

# ===================================================================
# FUNÇÃO AUXILIAR PARA LIMPAR NOMES DE ARQUIVOS
# ===================================================================

def sanitizar_nome_arquivo(nome, max_length=50):
    """
    Limpa e formata uma string para ser usada como um nome de arquivo seguro.
    - Remove acentos.
    - Converte para minúsculas.
    - Substitui espaços e caracteres especiais por underscores.
    - Trunca para um comprimento máximo.
    """
    nome = unicodedata.normalize('NFKD', nome).encode('ascii', 'ignore').decode('ascii')
    nome = nome.lower()
    nome = re.sub(r'[^a-z0-9-]+', '_', nome)
    nome = re.sub(r'_+', '_', nome).strip('_')
    return nome[:max_length]


# ===================================================================
# 1. LÓGICA DE PROCESSAMENTO (GERA UM XML POR PRESTADOR)
# ===================================================================

def gerar_arquivos_por_prestador(caminho_da_planilha):
    """
    Lê uma planilha e gera um par de arquivos XML (.xml e .rpi) para CADA prestador (linha).
    Retorna uma tupla (sucesso, mensagem).
    """
    try:
        df = pd.read_excel(caminho_da_planilha, dtype=str).fillna("")
        if df.empty:
            return (False, "Erro: A planilha está vazia ou não pôde ser lida.")

        linha0 = df.iloc[0]

        root_base = etree.Element("operadora", nsmap={"xsi": "http://www.w3.org/2001/XMLSchema-instance"})
        root_base.attrib["{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation"] = "SolicitacaoInclusaoPrestador.xsd"
        etree.SubElement(root_base, "registroANS").text = linha0["registroANS"]
        etree.SubElement(root_base, "cnpjOperadora").text = linha0["cnpjOperadora"]
        solicitacao_base = etree.SubElement(root_base, "solicitacao")
        etree.SubElement(solicitacao_base, "nossoNumero").text = linha0["nossoNumero"]
        etree.SubElement(solicitacao_base, "isencaoOnus").text = linha0["isencaoOnus"]
        
        def formatar_data_xml(data_raw):
            if not data_raw: return ""
            try: 
                return pd.to_datetime(data_raw).strftime("%d/%m/%Y")
            except (ValueError, TypeError): 
                return ""

        os.makedirs("saida", exist_ok=True)
        arquivos_gerados = 0

        for index, linha in df.iterrows():
            root_individual = copy.deepcopy(root_base)
            solicitacao_individual = root_individual.find('solicitacao')
            
            inclusao = etree.SubElement(solicitacao_individual, "inclusaoPrestador")
            
            cnpj_cpf_bruto = linha["cnpjCpf"]
            cnpj_cpf_limpo = re.sub(r'\D', '', cnpj_cpf_bruto)
            
            etree.SubElement(inclusao, "classificacao").text = linha["classificacao"]
            etree.SubElement(inclusao, "cnpjCpf").text = cnpj_cpf_limpo
            etree.SubElement(inclusao, "cnes").text = linha["cnes"]
            etree.SubElement(inclusao, "uf").text = linha["uf"]
            etree.SubElement(inclusao, "codigoMunicipioIBGE").text = linha["codigoMunicipioIBGE"]
            etree.SubElement(inclusao, "razaoSocial").text = linha["razaoSocial"]
            etree.SubElement(inclusao, "relacaoOperadora").text = linha["relacaoOperadora"]

            if linha["relacaoOperadora"] == "C":
                etree.SubElement(inclusao, "tipoContratualizacao").text = linha["tipoContratualizacao"]
                etree.SubElement(inclusao, "registroANSOperadoraIntermediaria").text = linha["registroANSOperadoraIntermediaria"]

            etree.SubElement(inclusao, "dataContratualizacao").text = formatar_data_xml(linha["dataContratualizacao"])
            etree.SubElement(inclusao, "dataInicioPrestacaoServico").text = formatar_data_xml(linha["dataInicioPrestacaoServico"])
            etree.SubElement(inclusao, "disponibilidadeServico").text = linha["disponibilidadeServico"]
            etree.SubElement(inclusao, "urgenciaEmergencia").text = linha["urgenciaEmergencia"]
            
            vinculacao = etree.SubElement(inclusao, "vinculacao")
            etree.SubElement(vinculacao, "numeroRegistroPlanoVinculacao").text = linha["numeroRegistroPlanoVinculacao"]
            etree.SubElement(vinculacao, "numeroRegistroPlanoVinculacao").text = linha["numeroRegistroPlanoVinculacao1"]
            etree.SubElement(vinculacao, "codigoPlanoOperadoraVinculacao").text = linha["codigoPlanoOperadoraVinculacao"]
            
            razao_social_sanitizada = sanitizar_nome_arquivo(linha["razaoSocial"])

            partes_nome = []
            if razao_social_sanitizada:
                partes_nome.append(razao_social_sanitizada)
            if cnpj_cpf_limpo:
                partes_nome.append(cnpj_cpf_limpo)
            
            identificador = "_".join(partes_nome)
            
            if not identificador:
                identificador = f"linha_{index + 2}"

            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

            # <-- ALTERAÇÃO AQUI: Adicionado o prefixo 'prestador_' -->
            base_arquivo_saida = f"saida/prestador_{identificador}_{timestamp}"
            
            arquivo_xml = f"{base_arquivo_saida}.xml"
            arquivo_rpi = f"{base_arquivo_saida}.rpi"

            tree = etree.ElementTree(root_individual)
            
            write_params = {"encoding": "utf-8", "pretty_print": True, "xml_declaration": True}
            tree.write(arquivo_xml, **write_params)
            tree.write(arquivo_rpi, **write_params)
            
            arquivos_gerados += 1

        caminho_saida = os.path.abspath("saida")
        mensagem_sucesso = (f"{arquivos_gerados} conjunto(s) de arquivos (XML e RPI) foram gerados com sucesso!\n\n"
                            f"Os arquivos foram salvos na pasta:\n{caminho_saida}")
        
        return (True, mensagem_sucesso)

    except KeyError as e:
        return (False, f"Erro: A coluna '{e}' não foi encontrada na planilha.\n\nVerifique se o nome da coluna está exatamente correto no arquivo Excel.")
    except Exception as e:
        return (False, f"Ocorreu um erro inesperado: {e}\n\nVerifique se a planilha está formatada corretamente.")


# ===================================================================
# 2. FUNÇÕES DA INTERFACE GRÁFICA (Nenhuma alteração aqui)
# ===================================================================
def selecionar_arquivo():
    caminho_arquivo = filedialog.askopenfilename(
        title="Selecione a planilha de prestadores",
        filetypes=[("Planilhas Excel", "*.xlsx *.xls"), ("Todos os arquivos", "*.*")]
    )
    if caminho_arquivo:
        caminho_planilha.set(caminho_arquivo)
        label_arquivo_selecionado.config(text=os.path.basename(caminho_arquivo))
        status_var.set("Planilha selecionada. Clique em 'Gerar Arquivos'.")

def iniciar_processamento():
    arquivo_selecionado = caminho_planilha.get()
    
    if not arquivo_selecionado:
        messagebox.showwarning("Aviso", "Por favor, selecione uma planilha primeiro.")
        return

    status_var.set("Processando... Aguarde.")
    btn_gerar.config(state="disabled")
    root.update_idletasks()

    sucesso, mensagem = gerar_arquivos_por_prestador(arquivo_selecionado)
    
    btn_gerar.config(state="normal")
    status_var.set("Pronto.")

    if sucesso:
        messagebox.showinfo("Sucesso!", mensagem)
    else:
        messagebox.showerror("Erro!", mensagem)

# ===================================================================
# 3. CRIAÇÃO E CONFIGURAÇÃO DA JANELA PRINCIPAL (Nenhuma alteração aqui)
# ===================================================================
root = tk.Tk()
root.title("Gerador de Arquivos para Prestadores (XML e RPI)")
root.geometry("450x250")

caminho_planilha = tk.StringVar()
status_var = tk.StringVar(value="Selecione uma planilha para começar.")

main_frame = tk.Frame(root, padx=20, pady=20)
main_frame.pack(expand=True, fill="both")

btn_selecionar = tk.Button(main_frame, text="1. Selecionar Planilha...", command=selecionar_arquivo, font=("Helvetica", 10))
btn_selecionar.pack(fill="x", pady=5)

label_arquivo_selecionado = tk.Label(main_frame, text="Nenhum arquivo selecionado", fg="blue", wraplength=400)
label_arquivo_selecionado.pack(pady=5)

btn_gerar = tk.Button(main_frame, text="2. Gerar Arquivos Individuais", command=iniciar_processamento, font=("Helvetica", 10, "bold"))
btn_gerar.pack(fill="x", pady=(15, 5))

label_status = tk.Label(main_frame, textvariable=status_var, fg="gray")
label_status.pack(side="bottom", fill="x", pady=(10, 0))

label_creditos = tk.Label(main_frame, 
                          text="Feito por Tucano Soluções TI", 
                          font=("Helvetica", 8, "italic"), 
                          fg="darkgray")
label_creditos.pack(side="bottom", pady=(0, 5))

root.mainloop()
